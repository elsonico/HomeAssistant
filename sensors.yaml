- platform: rest
  resource_template: >-
    https://data.fingrid.fi/api/datasets/245/data?format=xml&pageSize=1000&startTime={{(utcnow() - timedelta(hours = -1)).strftime('%Y-%m-%dT%H:00:00Z')}}&endTime={{ (utcnow() - timedelta(days = -1)).strftime('%Y-%m-%dT%H:00:00Z')}}
  name: Wind power estimate
  icon: mdi:wind-power
  value_template: 'OK'
  headers:
    x-api-key: !secret fingrid_api_key
  json_attributes:
    - "events"
  scan_interval: 3600

- platform: rest
  resource_template: >-
    https://data.fingrid.fi/api/datasets/245/data?format=xml&pageSize=1000&startTime={{ (utcnow() - timedelta(hours=0)).strftime('%Y-%m-%dT00:00:00Z') }}&endTime={{ (utcnow()).strftime('%Y-%m-%dT%H:%M:%SZ') }}
  name: Wind power today
  icon: mdi:wind-turbine
  value_template: 'OK'
  headers:
    x-api-key: !secret fingrid_api_key
  json_attributes:
    - "events"
  scan_interval: 3600


- platform: template
  sensors:
    energy_spot_price:
      friendly_name: "Nordpool Spot Price"
      unit_of_measurement: 'c/kWh'
      value_template: "{{ ('sensor.nordpool_kwh_fi_eur_3_10_0255')  }}"
    energy_helen:
      friendly_name: "Helen Spot Price €/kWh"
      unit_of_measurement: '€/kWh'
      value_template: "{{ (states('sensor.nordpool_kwh_fi_eur_3_10_0255')  | float / 100  ) | round(4) + 0.0034 }}"

    energy_helen_alv10c:
      friendly_name: "Helen Spot Price c/kWh alv. 24%"
      unit_of_measurement: 'c/kWh'
      value_template: "{{ (states('sensor.nordpool_kwh_fi_eur_3_10_0255')  |  float + 0.34 ) }}" 

    energy_spot_average_price:
      friendly_name: "Nordpool Average Spot Price"
      unit_of_measurement: 'c/kWh'
      #value_template: "{{ (state_attr('sensor.nordpool_kwh_fi_eur_3_10_0255', 'average') | float | round(2)) }}"
      value_template: "{{ state_attr('sensor.nordpool_kwh_fi_eur_3_10_0255', 'average') | float | round(2) }}"
      #value_template: "{{ state_attr('sensor.nordpool_kwh_fi_eur_3_10_0255', 'average') | int(0) }}"

    cheapest_hours_energy_tomorrow:
      device_class: timestamp
      friendly_name: Cheapest sequential electricity hours
      value_template: >
        {%- set numberOfSequentialHours = 3 -%}
        {%- set lastHour = 23 -%}
        {%- set firstHour = 0 -%}

        {%- if state_attr('sensor.nordpool_kwh_fi_eur_3_10_0255', 'tomorrow_valid') == true -%}
          {%- set ns = namespace(counter=0, list=[], cheapestHour=today_at("00:00") + timedelta( hours = (24)), cheapestPrice=999.00) -%}
          {%- for i in range(firstHour + numberOfSequentialHours, lastHour+1) -%}
            {%- set ns.counter = 0.0 -%}
            {%- for j in range(i-numberOfSequentialHours, i) -%}
              {%- set ns.counter = ns.counter + state_attr('sensor.nordpool_kwh_fi_eur_3_10_0255', 'tomorrow')[j] -%}
            {%- endfor -%}
            {%- set ns.list = ns.list + [ns.counter] -%}
            {%- if ns.counter < ns.cheapestPrice -%}
              {%- set ns.cheapestPrice = ns.counter -%}
              {%- set ns.cheapestHour = today_at("00:00") + timedelta( hours = (24 + i - numberOfSequentialHours)) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ ns.cheapestHour }}
          {%- set ns.cheapestPrice = ns.cheapestPrice / numberOfSequentialHours -%}
        {%- endif -%}

    nordpool:
      friendly_name: "Nordpool"
      unit_of_measurement: 'c/kWh'
      value_template: "{{ states('sensor.nordpool_kwh_fi_eur_3_10_0255') }}"
      availability_template: "{{ states('sensor.nordpool_kwh_fi_eur_3_10_0255') not in ['unknown', 'unavailable'] }}"
      attribute_templates:
        raw_today: "{{ state_attr('sensor.nordpool_kwh_fi_eur_3_10_0255', 'raw_today') }}"
        raw_tomorrow: "{{ state_attr('sensor.nordpool_kwh_fi_eur_3_10_0255', 'raw_tomorrow') }}"

- platform: rest
  resource: http://ip.jsontest.com
  name: External IP
  value_template: '{{ value_json.ip }}'

# BTC Price USD
- platform: cryptoinfo_advanced
  id: "BTC Price"
  cryptocurrency_name: "bitcoin"
  currency_name: "usd"
  unit_of_measurement: "$"
  update_frequency: 0.5
  extra_sensors:
    - property: "all_time_high"
      unit_of_measurement: "$"
    - property: "all_time_high_distance"
      unit_of_measurement: "$"
# BTC Price GBP
- platform: cryptoinfo_advanced
  id: "BTC Price EUR"
  cryptocurrency_name: "bitcoin"
  currency_name: "eur"
  unit_of_measurement: "€"
  update_frequency: 0.5
# BTC Dom
- platform: cryptoinfo_advanced
  id: "BTC Dominance"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"

- platform: cryptoinfo
  id: "main wallet"
  cryptocurrency_name: "ethereum"
  currency_name: "eur"
  unit_of_measurement: "€"
  multiplier: 1.05
  update_frequency: 1

- platform: template
  sensors:
    cryptoinfo_main_wallet_ethereum_eur_24h_volume:
      value_template: "{{ state_attr('sensor.cryptoinfo_main_wallet_ethereum_eur', 'volume') | round(0) }}"
      unit_of_measurement: "€"

- platform: template
  sensors:
    crypto_bitcoin_owned:
      friendly_name: "Bitcoin Owned"
      unit_of_measurement: '$'
      value_template: >
        {% if not is_state('sensor.cryptoinfo_bitcoin_usd', 'unknown') %}
          {{ (states('sensor.cryptoinfo_bitcoin_usd')|float *0.12345) | round(2) }}
        {%endif %}

- platform: cryptoinfo
  id: "dougecoin wallet"
  cryptocurrency_name: "douge"
  currency_name: "eur"
  unit_of_measurement: "€"
  multiplier: 1.5
  update_frequency: 1

# BTC Price USD
- platform: cryptoinfo_advanced
  id: "BTC Price"
  cryptocurrency_name: "bitcoin"
  currency_name: "usd"
  unit_of_measurement: "$"
  update_frequency: 0.5
  extra_sensors:
    - property: "all_time_high"
      unit_of_measurement: "$"
    - property: "all_time_high_distance"
      unit_of_measurement: "$"
# BTC Price GBP
- platform: cryptoinfo_advanced
  id: "BTC Price GBP"
  cryptocurrency_name: "bitcoin"
  currency_name: "gbp"
  unit_of_measurement: "£"
  update_frequency: 0.5
# BTC Dom
- platform: cryptoinfo_advanced
  id: "BTC Dominance"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 0.5
  api_mode: "dominance"
# ETH Dom
- platform: cryptoinfo_advanced
  id: "ETH Dominance"
  cryptocurrency_name: "eth"
  unit_of_measurement: "%"
  update_frequency: 0.5
  api_mode: "dominance"
# BTC Chain Summary
- platform: cryptoinfo_advanced
  id: "BTC Height"
  cryptocurrency_name: "btc"
  unit_of_measurement: "Blks"
  update_frequency: 2
  api_mode: "chain_summary"
  extra_sensors:
    - property: hashrate_calc
      id: "BTC Hashrate EH"
      unit_of_measurement: EH
    - property: difficulty_block_progress
      id: "BTC Difficulty Block Progress"
      unit_of_measurement: "Blks"
      state_class: total_increasing
    - property: difficulty_retarget_height
      id: "BTC Difficulty Retarget Height"
      unit_of_measurement: "Blks"
    - property: block_time_in_seconds
      id: "BTC Block Time In Seconds"
      unit_of_measurement: "seconds"
    - property: difficulty_retarget_seconds
      id: "BTC Difficulty Retarget Seconds"
      unit_of_measurement: "seconds"
    - property: difficulty_retarget_percent_change
      id: "BTC Difficulty Retarget Percent Change"
      unit_of_measurement: "%"
    - property: difficulty_retarget_estimated_diff
      id: "BTC Difficulty Retarget Estimated Diff"
      unit_of_measurement: ""
    - property: halving_block_progress
      id: "BTC Halving Block Progress"
      unit_of_measurement: "Blks"
    - property: next_halving_height
      id: "BTC Next Halving Height"
      unit_of_measurement: "Blks"
    - property: total_halvings_to_date
      id: "BTC Total Halvings To Date"
      unit_of_measurement: "Halvings"
# BTC Hash Control
- platform: cryptoinfo_advanced
  id: "BTC Foundry USA Hash Control 100 Blocks"
  unique_id: "btc_cco_bc1qxh"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "FoundryUSA"
    - "bc1qxh"
- platform: cryptoinfo_advanced
  id: "BTC F2Pool Hash Control 100 Blocks"
  unique_id: "btc_cco_1KFHE7"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "F2Pool"
    - "1KFHE7"
- platform: cryptoinfo_advanced
  id: "BTC Binance Hash Control 100 Blocks"
  unique_id: "btc_cco_1Q8QR5"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "Binance"
    - "1Q8QR5"
    - "3L8Ck6"
- platform: cryptoinfo_advanced
  id: "BTC AntPool Hash Control 100 Blocks"
  unique_id: "btc_cco_AntPool38XnPv"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "AntPool"
    - "38XnPv"
- platform: cryptoinfo_advanced
  id: "BTC ViaBTC Hash Control 100 Blocks"
  unique_id: "btc_cco_ViaBTC"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "ViaBTC"
    - "18cBEM"
- platform: cryptoinfo_advanced
  id: "BTC BTC.Com Hash Control 100 Blocks"
  unique_id: "btc_cco_36cWgj"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "BTC.Com"
    - "36cWgj"
- platform: cryptoinfo_advanced
  id: "BTC MaraPool Hash Control 100 Blocks"
  unique_id: "btc_cco_15MdAH"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "MaraPool"
    - "15MdAH"
- platform: cryptoinfo_advanced
  id: "BTC Poolin Hash Control 100 Blocks"
  unique_id: "btc_cco_poolin"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "Poolin"
    - "33TbzA"
- platform: cryptoinfo_advanced
  id: "BTC Pegapool Hash Control 100 Blocks"
  unique_id: "btc_cco_pegapool"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "3GRKUV"
- platform: cryptoinfo_advanced
  id: "BTC Luxor Hash Control 100 Blocks"
  unique_id: "btc_cco_luxor"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "39bitU"
- platform: cryptoinfo_advanced
  id: "BTC EMCD.io Hash Control 100 Blocks"
  unique_id: "btc_cco_emcdio"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "3LwoXD"
- platform: cryptoinfo_advanced
  id: "BTC Slushpool Hash Control 100 Blocks"
  unique_id: "btc_cco_slush"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "1CK6KH"
- platform: cryptoinfo_advanced
  id: "BTC CarbonNegative Hash Control 100 Blocks"
  unique_id: "btc_cco_carbonnegative"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "3KZDwm"
- platform: cryptoinfo_advanced
  id: "BTC SBICrypto Hash Control 100 Blocks"
  unique_id: "btc_cco_sbicrypto"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "bc1qte"
- platform: cryptoinfo_advanced
  id: "BTC Ultimus Hash Control 100 Blocks"
  unique_id: "btc_cco_ultimus"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "3C9sAK"
- platform: cryptoinfo_advanced
  id: "BTC Terrapool Hash Control 100 Blocks"
  unique_id: "btc_cco_terrapool"
  cryptocurrency_name: "btc"
  unit_of_measurement: "%"
  update_frequency: 1
  api_mode: "chain_control"
  pool_prefix:
    - "bc1q39"
# BTC Last Diff
- platform: cryptoinfo_advanced
  id: "BTC Last Diff Timestamp"
  cryptocurrency_name: "btc"
  unit_of_measurement: "s"
  update_frequency: 1
  api_mode: "chain_block_time"
# BTC Orphans
- platform: cryptoinfo_advanced
  id: "BTC Orphans Today"
  cryptocurrency_name: "btc"
  unit_of_measurement: "Blks"
  update_frequency: 1
  api_mode: "chain_orphans"
# BTC Mempool
- platform: cryptoinfo_advanced
  id: "BTC Mempool Size"
  cryptocurrency_name: "btc"
  unit_of_measurement: "vB"
  update_frequency: 1
  api_mode: "mempool_stats"
  extra_sensors:
    - property: mempool_tx_count
      id: "BTC Mempool TX Count"
      unit_of_measurement: "tx"
    - property: mempool_total_fee
      id: "BTC Mempool Total Fees"
      unit_of_measurement: "satoshis"
    - property: mempool_size_calc
      id: "BTC Mempool Size MB"
      unit_of_measurement: "MB"

- platform: rest
  name: Dogecoin Price
  resource: https://api.coingecko.com/api/v3/simple/price?ids=dogecoin&vs_currencies=usd
  value_template: "{{ value_json.dogecoin.usd | float | round(3) }}"
  unit_of_measurement: 'USD'
  scan_interval: 3600  # Update every hour

- platform: rest
  name: Litecoin Price
  resource: https://api.coingecko.com/api/v3/simple/price?ids=litecoin&vs_currencies=usd
  value_template: "{{ value_json.litecoin.usd | float | round(3) }}"
  unit_of_measurement: 'USD'
  scan_interval: 3600  # Update every hour


- platform: rest
  name: Dogecoin Price USD
  resource: https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?id=74&convert=USD
  headers:
    X-CMC_PRO_API_KEY: !secret coinmarketcap_api_key
  value_template: "{{ value_json.data['74'].quote.USD.price | float | round(3) }}"
  unit_of_measurement: 'USD'
  scan_interval: 3600  # Update every hour

- platform: rest
  name: Litecoin Price USD
  resource: https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?id=2&convert=USD
  headers:
    X-CMC_PRO_API_KEY: !secret coinmarketcap_api_key
  value_template: "{{ value_json.data['2'].quote.USD.price | float | round(3) }}"
  unit_of_measurement: 'USD'
  scan_interval: 3600  # Update every hour

- platform: rest
  name: Dogecoin Price EUR
  resource: https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?id=74&convert=EUR
  headers:
    X-CMC_PRO_API_KEY: !secret coinmarketcap_api_key
  value_template: "{{ value_json.data['74'].quote.EUR.price | float | round(3) }}"
  unit_of_measurement: 'EUR'
  scan_interval: 3600  # Update every hour

- platform: rest
  name: Litecoin Price EUR
  resource: https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?id=2&convert=EUR
  headers:
    X-CMC_PRO_API_KEY: !secret coinmarketcap_api_key
  value_template: "{{ value_json.data['2'].quote.EUR.price | float | round(3) }}"
  unit_of_measurement: 'EUR'
  scan_interval: 3600  # Update every hour

- platform: template
  sensors:
    eur_in_doge:
      friendly_name: "EUR in DOGE"
      value_template: "{{ (1 / states('sensor.dogecoin_price_eur') | float) | round(7) }}"
      unit_of_measurement: 'DOGE'

    eur_in_ltc:
      friendly_name: "EUR in LTC"
      value_template: "{{ (1 / states('sensor.litecoin_price_eur') | float) | round(7) }}"
      unit_of_measurement: 'LTC'

# Binance LTC Price in USD
#- platform: rest
#  name: Binance LTC Price in USD
#  resource: https://api.binance.com/api/v3/ticker/price?symbol=LTCUSDT
#  value_template: "{{ value_json['price'] | float }}"
#  unit_of_measurement: 'USD'
#  scan_interval: 3600

# Binance LTC Balance
#- platform: command_line
#  name: Binance LTC Balance
#  command: "/usr/local/bin/python3 /config/python_scripts/get_binance_balance.py > /config/command_output.log 2>&1"
#  unit_of_measurement: 'LTC'
#  scan_interval: 3600

#- platform: mqtt
#  name: "Binance LTC Balance"
#  state_topic: "binance/ltc_balance"
#  unit_of_measurement: "LTC"

- platform: template
  sensors:
    balance_total_eur:
      value_template: >
        {% if states('sensor.exodus_balance_total_eur') not in ['unknown', 'unavailable'] and 
              states('sensor.kraken_balance_total_eur') not in ['unknown', 'unavailable'] and 
              states('sensor.binance_balance_total_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.exodus_balance_total_eur') | float +
              states('sensor.kraken_balance_total_eur') | float +
              states('sensor.binance_balance_total_eur') | float) | round(2) }}
        {% else %}
          {{ states('sensor.balance_total_eur') }}
        {% endif %}
      unit_of_measurement: "EUR"
    balance_total_usd:
      value_template: >
        {% if states('sensor.exodus_balance_total_usd') not in ['unknown', 'unavailable'] and 
              states('sensor.kraken_balance_total_usd') not in ['unknown', 'unavailable'] and 
              states('sensor.binance_balance_total_usd') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.exodus_balance_total_usd') | float +
              states('sensor.kraken_balance_total_usd') | float +
              states('sensor.binance_balance_total_usd') | float) | round(2) }}
        {% else %}
          {{ states('sensor.balance_total_usd') }}
        {% endif %}
      unit_of_measurement: "USD"
    balance_total_cad:
      value_template: >
        {% if states('sensor.exodus_balance_total_cad') not in ['unknown', 'unavailable'] and 
              states('sensor.kraken_balance_total_cad') not in ['unknown', 'unavailable'] and 
              states('sensor.binance_balance_total_cad') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.exodus_balance_total_cad') | float +
              states('sensor.kraken_balance_total_cad') | float +
              states('sensor.binance_balance_total_cad') | float) | round(2) }}
        {% else %}
          {{ states('sensor.balance_total_cad') }}
        {% endif %}
      unit_of_measurement: "CAD"
    balance_total_ltc:
      value_template: >
        {% if states('sensor.exodus_balance_ltc') not in ['unknown', 'unavailable'] and 
              states('sensor.kraken_balance_ltc') not in ['unknown', 'unavailable'] and 
              states('sensor.binance_balance_ltc') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.exodus_balance_ltc') | float +
              states('sensor.kraken_balance_ltc') | float +
              states('sensor.binance_balance_ltc') | float) | round(8) }}
        {% else %}
          {{ states('sensor.balance_total_ltc') }}
        {% endif %}
      unit_of_measurement: "LTC"
    balance_total_doge:
      value_template: >
        {% if states('sensor.exodus_balance_doge') not in ['unknown', 'unavailable'] and 
              states('sensor.kraken_balance_doge') not in ['unknown', 'unavailable'] and 
              states('sensor.binance_balance_doge') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.exodus_balance_doge') | float +
              states('sensor.kraken_balance_doge') | float +
              states('sensor.binance_balance_doge') | float) | round(8) }}
        {% else %}
          {{ states('sensor.balance_total_doge') }}
        {% endif %}
      unit_of_measurement: "DOGE"
    balance_total_btc:
      value_template: >
        {% if states('sensor.exodus_balance_btc') not in ['unknown', 'unavailable'] and 
              states('sensor.kraken_balance_btc') not in ['unknown', 'unavailable'] and 
              states('sensor.binance_balance_btc') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.exodus_balance_btc') | float +
            states('sensor.kraken_balance_btc') | float +
            states('sensor.binance_balance_btc') | float) | round(8) }}
        {% else %}
          {{ states('sensor.balance_total_btc') }}
        {% endif %}
      unit_of_measurement: "BTC"
    balance_total_xrp:
      value_template: >
        {{ (states('sensor.binance_balance_xrp')) | float(0) | round(8) }}
      unit_of_measurement: "XRP"
    balance_total_pepe:
      value_template: >
        {% if states('sensor.binance_balance_pepe') not in ['unknown', 'unavailable'] %}
          {{ states('sensor.binance_balance_pepe') | float }}
        {% else %}
          {{ states('sensor.balance_total_pepe') }}
        {% endif %}
      unit_of_measurement: "PEPE"
    balance_total_bnb:
      value_template: >
        {% if states('sensor.binance_balance_bnb') not in ['unknown', 'unavailable'] %}
          {{ states('sensor.binance_balance_bnb') | float | round(8) }}
        {% else %}
          {{ states('sensor.balance_total_bnb') }}
        {% endif %}
      unit_of_measurement: "BNB"
    balance_total_eth:
      value_template: >
        {% if states('sensor.binance_balance_eth') not in ['unknown', 'unavailable'] %}
          {{ states('sensor.binance_balance_eth') | float | round(8) }}
        {% else %}
          {{ states('sensor.balance_total_eth') }}
        {% endif %}
      unit_of_measurement: "ETH"
    balance_total_ada:
      value_template: >
        {% if states('sensor.binance_balance_ada') not in ['unknown', 'unavailable'] %}
          {{ states('sensor.binance_balance_ada') | float | round(8) }}
        {% else %}
          {{ states('sensor.balance_total_ada') }}
        {% endif %}
      unit_of_measurement: "ADA"
    ltc_balance_in_eur:
      friendly_name: "LTC Balance (EUR)"
      unit_of_measurement: '€'
      value_template: >-
        {% if states('sensor.balance_total_ltc') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_ltc') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.balance_total_ltc') | float * 
              states('sensor.crypto_coin_value_ltc') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}

- platform: template
  sensors:
    pepe_balance_in_eur:
      friendly_name: "PEPE Balance (EUR)"
      unit_of_measurement: '€'
      value_template: >-
        {% if states('sensor.balance_total_pepe') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_pepe') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.balance_total_pepe') | float * 
              states('sensor.crypto_coin_value_pepe') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}

    xrp_balance_in_eur:
      friendly_name: "XRP Balance (EUR)"
      unit_of_measurement: '€'
      value_template: >-
        {% if states('sensor.balance_total_xrp') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_xrp') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.balance_total_xrp') | float * 
              states('sensor.crypto_coin_value_xrp') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}

    btc_balance_in_eur:
      friendly_name: "BTC Balance (EUR)"
      unit_of_measurement: '€'
      value_template: >-
        {% if states('sensor.balance_total_btc') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_btc') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.balance_total_btc') | float * 
              states('sensor.crypto_coin_value_btc') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}

    doge_balance_in_eur:
      friendly_name: "DOGE Balance (EUR)"
      unit_of_measurement: '€'
      value_template: >-
        {% if states('sensor.balance_total_doge') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_doge') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.balance_total_doge') | float * 
              states('sensor.crypto_coin_value_doge') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}

    bnb_balance_in_eur:
      friendly_name: "BNB Balance (EUR)"
      unit_of_measurement: '€'
      value_template: >-
        {% if states('sensor.balance_total_bnb') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_bnb') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.balance_total_bnb') | float * 
              states('sensor.crypto_coin_value_bnb') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}

    eth_balance_in_eur:
      friendly_name: "ETH Balance (EUR)"
      unit_of_measurement: '€'
      value_template: >-
        {% if states('sensor.balance_total_eth') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_eth') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.balance_total_eth') | float * 
              states('sensor.crypto_coin_value_eth') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}

    ada_balance_in_eur:
      friendly_name: "ADA Balance (EUR)"
      unit_of_measurement: '€'
      value_template: >-
        {% if states('sensor.balance_total_ada') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_ada') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.balance_total_ada') | float * 
              states('sensor.crypto_coin_value_ada') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}

- platform: template
  sensors:
    binance_btc_2nd_balance_in_eur:
      friendly_name: "Binance BTC 2nd Balance in EUR"
      unit_of_measurement: "€"
      value_template: >
        {% if states('sensor.binance_btc_2nd_balance') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_btc') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.binance_btc_2nd_balance') | float * 
              states('sensor.crypto_coin_value_btc') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}
    binance_doge_2nd_balance_in_eur:
      friendly_name: "Binance DOGE 2nd Balance in EUR"
      unit_of_measurement: "€"
      value_template: >-
        {% if states('sensor.binance_doge_2nd_balance') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_doge') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.binance_doge_2nd_balance') | float * 
              states('sensor.crypto_coin_value_doge') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}
    binance_ltc_2nd_balance_in_eur:
      friendly_name: "Binance LTC 2nd Balance in EUR"
      unit_of_measurement: "€"
      value_template: >-
        {% if states('sensor.binance_ltc_2nd_balance') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_ltc') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.binance_ltc_2nd_balance') | float * 
              states('sensor.crypto_coin_value_ltc') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}
    binance_bnb_2nd_balance_in_eur:
      friendly_name: "Binance BNB 2nd Balance in EUR"
      unit_of_measurement: "€"
      value_template: >-
        {% if states('sensor.binance_bnb_2nd_balance') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_bnb') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.binance_bnb_2nd_balance') | float * 
              states('sensor.crypto_coin_value_bnb') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}
    binance_eth_2nd_balance_in_eur:
      friendly_name: "Binance ETH 2nd Balance in EUR"
      unit_of_measurement: "€"
      value_template: >-
        {% if states('sensor.binance_eth_2nd_balance') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_eth') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.binance_eth_2nd_balance') | float * 
              states('sensor.crypto_coin_value_eth') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}
    binance_ada_2nd_balance_in_eur:
      friendly_name: "Binance ADA 2nd Balance in EUR"
      unit_of_measurement: "€"
      value_template: >-
        {% if states('sensor.binance_ada_2nd_balance') not in ['unknown', 'unavailable'] 
           and states('sensor.crypto_coin_value_ada') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {{ (states('sensor.binance_ada_2nd_balance') | float * 
              states('sensor.crypto_coin_value_ada') | float * 
              states('sensor.usd_eur') | float) | round(2) }}
        {% endif %}
    binance_total_2nd_balance_in_eur:
      friendly_name: "Binance Total 2nd Balance in EUR"
      unit_of_measurement: "€"
      value_template: >-
        {% if states('sensor.binance2_balance_btc') not in ['unknown', 'unavailable'] 
           and states('sensor.binance2_balance_doge') not in ['unknown', 'unavailable']
           and states('sensor.binance2_balance_ltc') not in ['unknown', 'unavailable']
           and states('sensor.binance2_balance_bnb') not in ['unknown', 'unavailable']
           and states('sensor.binance2_balance_eth') not in ['unknown', 'unavailable']
           and states('sensor.binance2_balance_ada') not in ['unknown', 'unavailable']
           and states('sensor.crypto_coin_value_btc') not in ['unknown', 'unavailable']
           and states('sensor.crypto_coin_value_doge') not in ['unknown', 'unavailable']
           and states('sensor.crypto_coin_value_ltc') not in ['unknown', 'unavailable']
           and states('sensor.crypto_coin_value_bnb') not in ['unknown', 'unavailable']
           and states('sensor.crypto_coin_value_eth') not in ['unknown', 'unavailable']
           and states('sensor.crypto_coin_value_ada') not in ['unknown', 'unavailable']
           and states('sensor.usd_eur') not in ['unknown', 'unavailable'] %}
          {% set btc = states('sensor.binance2_balance_btc') | float * states('sensor.crypto_coin_value_btc') | float * states('sensor.usd_eur') | float %}
          {% set doge = states('sensor.binance2_balance_doge') | float * states('sensor.crypto_coin_value_doge') | float * states('sensor.usd_eur') | float %}
          {% set ltc = states('sensor.binance2_balance_ltc') | float * states('sensor.crypto_coin_value_ltc') | float * states('sensor.usd_eur') | float %}
          {% set bnb = states('sensor.binance2_balance_bnb') | float * states('sensor.crypto_coin_value_bnb') | float * states('sensor.usd_eur') | float %}
          {% set eth = states('sensor.binance2_balance_eth') | float * states('sensor.crypto_coin_value_eth') | float * states('sensor.usd_eur') | float %}
          {% set ada = states('sensor.binance2_balance_ada') | float * states('sensor.crypto_coin_value_ada') | float * states('sensor.usd_eur') | float %}
          {{ (btc + doge + ltc + bnb + eth + ada) | round(2) }}
        {% endif %}

- platform: rest
  name: Litecoinpool Hashrate
  resource: !secret litecoinpool_api_url
  value_template: "{{ value_json.user.hash_rate | float / 1000 }}"
  unit_of_measurement: "MH/s"

- platform: rest
  name: Litecoinpool LTC Balance
  resource: !secret litecoinpool_api_url
  value_template: "{{ value_json.user.unpaid_rewards | float }}"
  unit_of_measurement: "LTC"

- platform: rest
  name: Litecoinpool DOGE Balance
  resource: !secret litecoinpool_api_url
  value_template: "{{ value_json.user.unpaid_rewards_doge | float }}"
  unit_of_measurement: "DOGE"

- platform: template
  sensors:
    electricity_cost_per_kwh:
      friendly_name: "Electricity Cost Per kWh"
      unit_of_measurement: "€/kWh"
      value_template: >
        {% set spot_price = (states('sensor.nordpool_kwh_fi_eur_3_10_0255') | float(0)) / 100 %}
        {% set electricity_tax = 0.0283 %}
        {% set transfer_day = 0.0262 %}
        {% set transfer_night = 0.0137 %}
        {% set now = now() %}
        {% set transfer_cost = transfer_night if now.hour >= 22 or now.hour < 7 else transfer_day %}
        {{ (spot_price + electricity_tax + transfer_cost) | round(4) }}
    electricity_cost_in_cents_per_kwh:
      friendly_name: "Electricity Cost in Cents Per kWh"
      unit_of_measurement: "c/kWh"
      value_template: >
        {% set spot_price = (states('sensor.nordpool_kwh_fi_eur_3_10_0255') | float(0)) %}
        {% set electricity_tax = 2.83 %}
        {% set transfer_day = 2.62 %}
        {% set transfer_night = 1.37 %}
        {% set now = now() %}
        {% set transfer_cost = transfer_night if now.hour >= 22 or now.hour < 7 else transfer_day %}
        {{ (spot_price + electricity_tax + transfer_cost) | round(4) }}

- platform: rest
  name: Litecoinpool Market Data
  resource: !secret litecoinpool_api_url
  method: GET
  scan_interval: 300
  value_template: "OK"
  json_attributes:
    - user
    - market

- platform: template
  sensors:
    litecoin_rewards_eur:
      friendly_name: "Litecoin Rewards EUR"
      unit_of_measurement: "€"
      value_template: >
        {% set ltc_balance = states('sensor.litecoinpool_ltc_balance') | float(0) %}
        {% set ltc_price_eur = state_attr('sensor.litecoinpool_market_data', 'ltc_eur') | float(0) %}
        {{ (ltc_balance * ltc_price_eur) | round(2) }}

    dogecoin_rewards_eur:
      friendly_name: "Dogecoin Rewards EUR"
      unit_of_measurement: "€"
      value_template: >
        {% set doge_balance = states('sensor.litecoinpool_doge_balance') | float(0) %}
        {% set doge_price_eur = state_attr('sensor.litecoinpool_market_data', 'doge_eur') | float(0) %}
        {{ (doge_balance * doge_price_eur) | round(2) }}

    total_rewards_eur:
      friendly_name: "Total Rewards EUR"
      unit_of_measurement: "€"
      value_template: >
        {% set total_rewards_ltc = state_attr('sensor.litecoinpool_market_data', 'user')['total_rewards'] | float(0) %}
        {% set total_rewards_doge = state_attr('sensor.litecoinpool_market_data', 'user')['total_rewards_doge'] | float(0) %}
        {% set ltc_price_eur = state_attr('sensor.litecoinpool_market_data', 'market')['ltc_eur'] | float(0) %}
        {% set doge_price_eur = state_attr('sensor.litecoinpool_market_data', 'market')['doge_eur'] | float(0) %}
        {{ ((total_rewards_ltc * ltc_price_eur) + (total_rewards_doge * doge_price_eur)) | round(2) }}

    total_rewards_ltc_eur:
      friendly_name: "Total Rewards LTC EUR"
      unit_of_measurement: "€" 
      value_template: >
        {% set total_rewards = state_attr('sensor.litecoinpool_market_data', 'user')['total_rewards'] | float(0) %}
        {% set ltc_price_eur = state_attr('sensor.litecoinpool_market_data', 'market')['ltc_eur'] | float(0) %}
        {{ (total_rewards * ltc_price_eur) | round(4) }}


- platform: template
  sensors:
    shellyplug_s_3ce90ee04b97_energy_cost_hourly:
      friendly_name: "Shelly Plug Hourly Cost"
      unit_of_measurement: "€" 
      value_template: >
        {% set power = states('sensor.shellyplug_s_3ce90ee04b97_power') | float(0) %}
        {% set cost_per_kwh = states('sensor.electricity_cost_per_kwh') | float(0) %}
        {{ ((power / 1000) * cost_per_kwh) | round(2) }}

    shellyplug_s_3ce90ee04b97_energy_cost_daily:
      friendly_name: "Shelly Plug Daily Cost"
      unit_of_measurement: "€" 
      value_template: >
        {% set power = states('sensor.shellyplug_s_3ce90ee04b97_power') | float(0) %}
        {% set cost_per_kwh = states('sensor.electricity_cost_per_kwh') | float(0) %}
        {{ ((power / 1000) * cost_per_kwh * 24) | round(2) }}

    shellyplug_s_3ce90ee04b97_energy_cost_weekly:
      friendly_name: "Shelly Plug Weekly Cost"
      unit_of_measurement: "€" 
      value_template: >
        {% set power = states('sensor.shellyplug_s_3ce90ee04b97_power') | float(0) %}
        {% set cost_per_kwh = states('sensor.electricity_cost_per_kwh') | float(0) %}
        {{ ((power / 1000) * cost_per_kwh * 24 * 7) | round(2) }}


- platform: template
  sensors:
    miner_rewards_hourly:
      friendly_name: "Miner Rewards Hourly"
      unit_of_measurement: "€"
      value_template: >
        {% set expected_24h_rewards = state_attr('sensor.litecoinpool_market_data', 'user')['expected_24h_rewards'] | float(0) %}
        {% set ltc_price_eur = (state_attr('sensor.litecoinpool_market_data', 'market')['ltc_eur'] | float(0)) * 10 %}
        {{ ((expected_24h_rewards * ltc_price_eur) / 24) | round(4) }}
    miner_rewards_daily:
      friendly_name: "Miner Rewards Daily"
      unit_of_measurement: "€"
      value_template: >
        {% set expected_24h_rewards = state_attr('sensor.litecoinpool_market_data', 'user')['expected_24h_rewards'] | float(0) %}
        {% set ltc_price_eur = (state_attr('sensor.litecoinpool_market_data', 'market')['ltc_eur'] | float(0)) * 10 %}
        {{ (expected_24h_rewards * ltc_price_eur) | round(4) }}
    miner_profitability:
      friendly_name: "Miner Profitability"
      unit_of_measurement: "€"
      value_template: >
        {% set daily_rewards = states('sensor.miner_rewards_daily') | float(0) %}
        {% set daily_costs = states('sensor.shellyplug_s_3ce90ee04b97_energy_cost_daily') | float(0) %}
        {{ (daily_rewards - daily_costs) | round(2) }}

- platform: template
  sensors:
    accumulated_rewards_eur:
      friendly_name: "Accumulated Rewards EUR"
      unit_of_measurement: "€"
      value_template: >
        {% set current_rewards = states('sensor.litecoin_rewards_eur') | float(0) %}
        {% set total_rewards = states('sensor.accumulated_rewards_eur') | float(0) %}
        {{ (total_rewards + current_rewards) | round(2) }}

- platform: template
  sensors:
    miner_paid_rewards_eur:
      friendly_name: "Miner Paid Rewards EUR"
      unit_of_measurement: "€"
      value_template: >
        {% set paid_rewards_ltc = state_attr('sensor.litecoinpool_market_data', 'user')['paid_rewards'] | float(0) %}
        {% set paid_rewards_doge = state_attr('sensor.litecoinpool_market_data', 'user')['paid_rewards_doge'] | float(0) %}
        {% set ltc_price_eur = state_attr('sensor.litecoinpool_market_data', 'ltc_eur') | float(0) %}
        {% set doge_price_eur = state_attr('sensor.litecoinpool_market_data', 'doge_eur') | float(0) %}
        {{ ((paid_rewards_ltc * ltc_price_eur) + (paid_rewards_doge * doge_price_eur)) | round(2) }}
    worker_rewards_eur:
      friendly_name: "Worker Rewards EUR"
      unit_of_measurement: "€"
      value_template: >
        {% set workers = state_attr('sensor.litecoinpool_market_data', 'workers') %}
        {% if workers and 'elsonico.dg1' in workers %}
          {% set worker_rewards_ltc = workers['elsonico.dg1'].get('rewards', 0) | float(0) %}
          {% set worker_rewards_doge = workers['elsonico.dg1'].get('rewards_doge', 0) | float(0) %}
          {% set ltc_price_eur = state_attr('sensor.litecoinpool_market_data', 'ltc_eur') | float(0) %}
          {% set doge_price_eur = state_attr('sensor.litecoinpool_market_data', 'doge_eur') | float(0) %}
          {{ ((worker_rewards_ltc * ltc_price_eur) + (worker_rewards_doge * doge_price_eur)) | round(2) }}
        {% else %}
          0.00
        {% endif %}

- platform: rest         
  name: "PowerPool Hashrate"                                                                                                        
  resource: !secret powerpool_user_api_url
  value_template: "{{ value_json.data.hashrate.scrypt.hashrate | float }}"
  unit_of_measurement: "GH/s"
  scan_interval: 300

- platform: rest         
  name: "PowerPool Rejection Rate"                                                                                                        
  resource: !secret powerpool_user_api_url
  value_template: "{{ value_json.data.workers[0].rejectedPercentage | float }}"
  unit_of_measurement: "%"
  scan_interval: 300

- platform: rest         
  name: "PowerPool BTC Balance"                                                                                                        
  resource: !secret powerpool_user_api_url
  value_template: >
    {% for balance in value_json.data.balances %}
      {% if balance.coinTicker == 'BTC' %}
        {{ balance.balance | float }}
        {% break %}
      {% endif %}
    {% endfor %}
  unit_of_measurement: "BTC"
  scan_interval: 300

- platform: rest         
  name: "PowerPool USD Balance"                                                                                                        
  resource: !secret powerpool_user_api_url
  value_template: >
    {% for balance in value_json.data.balances %}
      {% if balance.coinTicker == 'BTC' %}
        {{ balance.balanceUSD | float }}
        {% break %}
      {% endif %}
    {% endfor %}
  unit_of_measurement: "USD"
  scan_interval: 300

- platform: rest         
  name: "PowerPool BTC Rewards"                                                                                                        
  resource: !secret powerpool_user_api_url
  value_template: >
    {% for reward in value_json.data.workers[0].totalRewards %}
      {% if reward.coinTicker == 'BTC' %}
        {{ reward.totalRewards | float }}
        {% break %}
      {% endif %}
    {% endfor %}
  unit_of_measurement: "BTC"
  scan_interval: 300

- platform: template
  sensors:
    powerpool_balance_eur:
      friendly_name: "PowerPool Balance EUR"
      unit_of_measurement: "€"
      value_template: >
        {% set usd_balance = states('sensor.powerpool_usd_balance') | float %}
        {% set usd_eur_rate = states('sensor.usd_eur') | float %}
        {{ (usd_balance * usd_eur_rate) | round(2) }}

    powerpool_expected_daily_rewards:
      friendly_name: "PowerPool Expected Daily Rewards"
      unit_of_measurement: "BTC"
      value_template: >
        {% set hashrate = states('sensor.powerpool_hashrate') | float(0) %}
        {% set avg_payrate = states('sensor.powerpool_scrypt_average_payrate') | float(0) %}
        {% if hashrate > 0 and avg_payrate > 0 %}
          {% set hashrate_th = hashrate / 1000 %}
          {{ (hashrate_th * avg_payrate) | round(8) }}
        {% else %}
          0
        {% endif %}

    powerpool_expected_daily_rewards_eur:
      friendly_name: "PowerPool Expected Daily Rewards EUR"
      unit_of_measurement: "€"
      value_template: >
        {% set expected_btc = states('sensor.powerpool_expected_daily_rewards') | float(0) %}
        {% set usd_balance = states('sensor.powerpool_usd_balance') | float(0) %}
        {% set btc_balance = states('sensor.powerpool_btc_balance') | float(0) %}
        {% if btc_balance > 0 and expected_btc > 0 %}
          {% set btc_eur_rate = (usd_balance / btc_balance) * states('sensor.usd_eur') | float(0) %}
          {{ (expected_btc * btc_eur_rate * 24) | round(2) }}
        {% else %}
          0
        {% endif %}

    powerpool_expected_daily_profit:
      friendly_name: "PowerPool Expected Daily Profit"
      unit_of_measurement: "€"
      value_template: >
        {% set expected_rewards = states('sensor.powerpool_expected_daily_rewards_eur') | float(0) %}
        {% set energy_cost = states('sensor.shellyplug_s_3ce90ee04b97_energy_cost_daily') | float(0) %}
        {{ (expected_rewards - energy_cost) | round(2) }}

- platform: template
  sensors:
    powerpool_hashrate_gh:
      friendly_name: "PowerPool Hashrate GH/s"
      unit_of_measurement: "GH/s"
      value_template: >
        {% set hashrate = states('sensor.powerpool_hashrate') | float(0) %}
        {{ hashrate | round(2) }}

    powerpool_hashrate_mh:
      friendly_name: "PowerPool Hashrate MH/s"
      unit_of_measurement: "MH/s"
      value_template: >
        {% set hashrate = states('sensor.powerpool_hashrate') | float(0) %}
        {{ (hashrate * 1000) | round(0) }}

# First, let's add REST sensor for pool data
- platform: rest
  name: "PowerPool Pool Data"
  resource: !secret powerpool_pool_api_url
  value_template: "{{ value_json is not none }}"
  scan_interval: 300

# Add template sensors for pay rates
- platform: template
  sensors:
    powerpool_scrypt_average_payrate:
      friendly_name: "PowerPool Scrypt 24h Average Pay Rate"
      unit_of_measurement: "BTC/TH"
      value_template: >
        {% set pool_data = states('sensor.powerpool_pool_data') %}
        {% if pool_data != 'unknown' %}
          {% set data = fromjson(pool_data) %}
          {{ data.scrypt.BTCaveragePayRate | float(0) }}
        {% else %}
          0
        {% endif %}

    powerpool_scrypt_current_payrate:
      friendly_name: "PowerPool Scrypt Current Pay Rate"
      unit_of_measurement: "BTC/TH"
      value_template: >
        {% set pool_data = states('sensor.powerpool_pool_data') %}
        {% if pool_data != 'unknown' %}
          {% set data = fromjson(pool_data) %}
          {{ data.scrypt.BTCpayRate | float(0) }}
        {% else %}
          0
        {% endif %}


